from typing import Dict, Any, Optional
import requests
import json
import logging
import re
from dataclasses import dataclass
from deepseek_config import DEEPSEEK_API_KEY, DEEPSEEK_API_URL

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class TradingAnalysis:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    signal_type: str
    confidence_level: int
    risk_level: str
    assets_mentioned: list
    price_targets: Dict[str, str]
    timeframe: str
    summary: str
    recommendation: str
    key_risks: str

class DeepSeekTradingAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DeepSeek API"""
    
    def __init__(self):
        self.api_key: str = DEEPSEEK_API_KEY
        self.api_url: str = DEEPSEEK_API_URL
        self.session = requests.Session()
        self.session.headers.update({
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        })

    def analyze_message(self, message_text: str, channel_info: str = "") -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message_text (str): –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            channel_info (str): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
        """
        if not self._validate_input(message_text):
            return {"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç"}

        try:
            response = self._make_api_request(message_text, channel_info)
            return self._process_response(response)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
            return {"error": str(e)}

    def _validate_input(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return bool(text and isinstance(text, str) and len(text.strip()) > 0)

    def _make_api_request(self, message: str, context: str) -> requests.Response:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API"""
        payload = {
            "model": "deepseek-chat",
            "messages": [
                {
                    "role": "system",
                    "content": self._get_system_prompt()
                },
                {
                    "role": "user",
                    "content": self._create_trading_prompt(message, context)
                }
            ],
            "temperature": 0.3,
            "max_tokens": 1000
        }

        response = self.session.post(
            self.api_url,
            json=payload,
            timeout=10
        )
        response.raise_for_status()
        return response

    def _process_response(self, response: requests.Response) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"""
        data = response.json()
        if 'choices' not in data or not data['choices']:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API")
            
        analysis = data['choices'][0]['message']['content']
        return self._parse_analysis(analysis)

    def _get_system_prompt(self) -> str:
        """–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è API"""
        return """–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä-–∞–Ω–∞–ª–∏—Ç–∏–∫. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç—Ä–µ–π–¥–∏–Ω–≥-—á–∞—Ç–æ–≤ 
                 –∏ –¥–∞–≤–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤."""

    def _create_trading_prompt(self, message: str, context: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        return f"""
        üîç –ê–ù–ê–õ–ò–ó –¢–†–ï–ô–î–ò–ù–ì –°–ò–ì–ù–ê–õ–ê

        üìù –°–û–û–ë–©–ï–ù–ò–ï: "{message.strip()}"
        üìä –ö–û–ù–¢–ï–ö–°–¢: {context}

        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–µ—Ä–Ω–∏ JSON:
        {{
            "signal_type": "BUY/SELL/HOLD/DISCUSSION",
            "confidence_level": 1-10,
            "risk_level": "LOW/MEDIUM/HIGH",
            "assets_mentioned": ["—Ç–∏–∫–µ—Ä—ã"],
            "price_targets": {{"entry": "", "target": "", "stop_loss": ""}},
            "timeframe": "SHORT/MEDIUM/LONG_TERM",
            "summary": "–∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥",
            "recommendation": "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è",
            "key_risks": "—Ä–∏—Å–∫–∏"
        }}"""

    def _parse_analysis(self, analysis_text: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            json_match = re.search(r'\{.*\}', analysis_text, re.DOTALL)
            if not json_match:
                return {"raw_analysis": analysis_text}
                
            data = json.loads(json_match.group())
            return TradingAnalysis(**data).__dict__
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return {"raw_analysis": analysis_text}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return {"error": str(e), "raw_analysis": analysis_text}

def main():
    """–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫"""
    analyzer = DeepSeekTradingAnalyzer()
    test_message = "BUY PEPE NOW! Target 0.000012, stop loss 0.000008. Chart looks bullish!"
    
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
    result = analyzer.analyze_message(test_message, "Test Channel")
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
    print(json.dumps(result, indent=2, ensure_ascii=False))

if __name__ == "__main__":
    main()