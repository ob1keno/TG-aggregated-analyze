import requests
import json
from deepseek_config import DEEPSEEK_API_KEY, DEEPSEEK_API_URL

class DeepSeekTradingAnalyzer:
    def __init__(self):
        self.api_key = DEEPSEEK_API_KEY
        self.api_url = DEEPSEEK_API_URL
        
    def analyze_message(self, message_text, channel_info=""):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ DeepSeek API"""
        
        prompt = self.create_trading_prompt(message_text, channel_info)
        
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": "deepseek-chat",
            "messages": [
                {
                    "role": "system", 
                    "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä-–∞–Ω–∞–ª–∏—Ç–∏–∫. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç—Ä–µ–π–¥–∏–Ω–≥-—á–∞—Ç–æ–≤ –∏ –¥–∞–≤–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "temperature": 0.3,
            "max_tokens": 1000
        }
        
        try:
            response = requests.post(self.api_url, headers=headers, json=payload)
            response_data = response.json()
            
            if 'choices' in response_data:
                analysis = response_data['choices'][0]['message']['content']
                return self.parse_analysis(analysis)
            else:
                return {"error": "–û—à–∏–±–∫–∞ API", "response": response_data}
                
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"}
    
    def create_trading_prompt(self, message, context):
        return f"""
        üîç –ê–ù–ê–õ–ò–ó –¢–†–ï–ô–î–ò–ù–ì –°–ò–ì–ù–ê–õ–ê
        
        üìù –°–û–û–ë–©–ï–ù–ò–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
        "{message}"
        
        üìä –ö–û–ù–¢–ï–ö–°–¢:
        –ö–∞–Ω–∞–ª: {context}
        
        üéØ –ó–ê–î–ê–ß–ê:
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Ç—Ä–µ–π–¥–∏–Ω–≥-—Å–∏–≥–Ω–∞–ª –∏ –¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É.
        
        üìã –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (JSON):
        {{
            "signal_type": "BUY/SELL/HOLD/DISCUSSION",
            "confidence_level": 1-10,
            "risk_level": "LOW/MEDIUM/HIGH",
            "assets_mentioned": ["—Å–ø–∏—Å–æ–∫", "—Ç–∏–∫–µ—Ä–æ–≤"],
            "price_targets": {{"entry": "", "target": "", "stop_loss": ""}},
            "timeframe": "SHORT/MEDIUM/LONG_TERM",
            "summary": "–∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥",
            "recommendation": "–¥–µ—Ç–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è",
            "key_risks": "–æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏"
        }}
        
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –≤–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ.
        """
    
    def parse_analysis(self, analysis_text):
        """–ü–∞—Ä—Å–∏—Ç –∞–Ω–∞–ª–∏–∑ –æ—Ç DeepSeek"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ
            if '{' in analysis_text and '}' in analysis_text:
                json_start = analysis_text.find('{')
                json_end = analysis_text.rfind('}') + 1
                json_str = analysis_text[json_start:json_end]
                return json.loads(json_str)
            else:
                return {"raw_analysis": analysis_text}
        except:
            return {"raw_analysis": analysis_text}

# –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    analyzer = DeepSeekTradingAnalyzer()
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    test_message = "BUY PEPE NOW! Target 0.000012, stop loss 0.000008. Chart looks bullish!"
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä...")
    result = analyzer.analyze_message(test_message, "Test Channel")
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
    print(json.dumps(result, indent=2, ensure_ascii=False))